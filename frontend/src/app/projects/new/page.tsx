"use client";

import React, { useState } from "react";
import Sidebar from "@/features/dashboard/components/Sidebar";
import HeaderSection from "@/features/projects/components/HeaderSection";
import TextInput from "@/features/projects/components/TextInput";
import ResourceSection from "@/features/projects/components/ResourceSection";
import { extractDataToAPI, extractDataToAPIAdvanced } from "@/utils/dataExtractor";

interface VideoStatus {
  id: string;
  status: 'PENDING' | 'COMPLETED' | 'FAILED';
  progress: number;
  url: string | null;
  state?: string;
}

export default function CreateVideoPage() {
  const [isRendering, setIsRendering] = useState(false);
  const [renderProgress, setRenderProgress] = useState(0);
  const [renderState, setRenderState] = useState<string>('');
  const [currentVideoId, setCurrentVideoId] = useState<string | null>(null);

  const data = {
    title: "S·ª©c kh·ªèe l√† v·ªën qu√Ω nh·∫•t c·ªßa con ng∆∞·ªùi",
    context: "M·ªôt c√°i ng·ªØ c·∫£nh g√¨ ƒë√≥ ƒë·ªÉ sinh ·∫£nh cho gi·ªëng nhau",
    contents: [
      {
        description: "M·ªôt c√°i m√¥ t·∫£ g√¨ ƒë√≥",
        image: "https://www.shutterstock.com/shutterstock/photos/1931719025/display_1500/stock-photo-blood-sugar-testing-equipment-for-diabetics-with-monitor-and-lancing-device-and-heath-foods-below-1931719025.jpg",
        subtitles: [
          {
            text: "Trong gu·ªìng quay h·ªëi h·∫£ c·ªßa cu·ªôc s·ªëng hi·ªán ƒë·∫°i, ch√∫ng ta th∆∞·ªùng m·∫£i mi·∫øt theo ƒëu·ªïi danh v·ªçng, ti·ªÅn t√†i, m√† ƒë√¥i khi qu√™n ƒëi m·ªôt ƒëi·ªÅu gi·∫£n d·ªã nh∆∞ng v√¥ c√πng quan tr·ªçng: **s·ª©c kh·ªèe**.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 7500,
          },
          {
            text: "S·ª©c kh·ªèe kh√¥ng ch·ªâ l√† s·ª± v·∫Øng m·∫∑t c·ªßa b·ªánh t·∫≠t, m√† l√† tr·∫°ng th√°i ho√†n h·∫£o v·ªÅ th·ªÉ ch·∫•t, tinh th·∫ßn v√† x√£ h·ªôi, l√† n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho m·ªçi ∆∞·ªõc m∆° v√† ho√†i b√£o c·ªßa m·ªói ng∆∞·ªùi.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 10500,
          },
        ]
      },
      {
        description: "M·ªôt c√°i m√¥ t·∫£ kh√°c",
        image: "https://www.shutterstock.com/shutterstock/photos/1931719025/display_1500/stock-photo-blood-sugar-testing-equipment-for-diabetics-with-monitor-and-lancing-device-and-heath-foods-below-1931719025.jpg",
        subtitles: [
          {
            text: "B·∫°n c√≥ th·ªÉ c√≥ t·∫•t c·∫£ c·ªßa c·∫£i tr√™n ƒë·ªùi, nh∆∞ng n·∫øu kh√¥ng c√≥ s·ª©c kh·ªèe, li·ªáu b·∫°n c√≥ th·ªÉ t·∫≠n h∆∞·ªüng ch√∫ng m·ªôt c√°ch tr·ªçn v·∫πn? M·ªôt c∆° th·ªÉ c∆∞·ªùng tr√°ng, m·ªôt tinh th·∫ßn minh m·∫´n ch√≠nh l√† ch√¨a kh√≥a ƒë·ªÉ ta l√†m vi·ªác, h·ªçc t·∫≠p v√† tr·∫£i nghi·ªám cu·ªôc s·ªëng.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 11000,
          },
        ]
      },
      {
        description: "M·ªôt c√°i m√¥ t·∫£ kh√°c n·ªØa",
        image: "https://www.shutterstock.com/shutterstock/photos/1931719025/display_1500/stock-photo-blood-sugar-testing-equipment-for-diabetics-with-monitor-and-lancing-device-and-heath-foods-below-1931719025.jpg",
        subtitles: [
          {
            text: "H√£y t∆∞·ªüng t∆∞·ª£ng m·ªôt ng√†y b·∫°n th·ª©c d·∫≠y tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng, s·∫µn s√†ng ƒë·ªëi m·∫∑t v·ªõi m·ªçi th·ª≠ th√°ch. ƒê√≥ l√† m√≥n qu√† v√¥ gi√° m√† s·ª©c kh·ªèe mang l·∫°i, gi√∫p b·∫°n theo ƒëu·ªïi ƒëam m√™ v√† ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 12500,
          },
          {
            text: "ƒê·ªÉ gi·ªØ g√¨n v·ªën qu√Ω n√†y, h√£y b·∫Øt ƒë·∫ßu t·ª´ nh·ªØng th√≥i quen nh·ªè: ƒÉn u·ªëng khoa h·ªçc, t·∫≠p luy·ªán ƒë·ªÅu ƒë·∫∑n, ng·ªß ƒë·ªß gi·∫•c v√† gi·ªØ tinh th·∫ßn l·∫°c quan. ƒê·ª´ng ch·ªù ƒë·∫øn khi m·∫•t ƒëi m·ªõi h·ªëi ti·∫øc.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 11000,
          }
        ]
      },
      {
        description: "M·ªôt c√°i m√¥ t·∫£ kh√°c n·ªØa",
        image: "https://www.shutterstock.com/shutterstock/photos/1931719025/display_1500/stock-photo-blood-sugar-testing-equipment-for-diabetics-with-monitor-and-lancing-device-and-heath-foods-below-1931719025.jpg",
        subtitles: [
          {
            text: "H√£y nh·ªõ r·∫±ng, **s·ª©c kh·ªèe ch√≠nh l√† t√†i s·∫£n qu√Ω gi√° nh·∫•t m√† b·∫°n c√≥**. H√£y tr√¢n tr·ªçng v√† b·∫£o v·ªá n√≥ m·ªói ng√†y.",
            audio: "https://cdn.designcombo.dev/audio/Dawn%20of%20change.mp3",
            duration: 4500,
          }
        ]
      }
    ]
  };

  // Polling function
  const pollVideoStatus = async (videoId: string): Promise<void> => {
    try {
      const response = await fetch(`http://localhost:3100/api/render?id=${videoId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      const status: VideoStatus = result.video;
      
      console.log(`Polling - Status: ${status.status}, Progress: ${status.progress}%${status.state ? `, State: ${status.state}` : ''}`);
      
      // Update UI
      setRenderProgress(status.progress);
      setRenderState(status.state || '');
      
      if (status.status === 'COMPLETED') {
        setIsRendering(false);
        setCurrentVideoId(null);
        
        // Show success alert with download link
        const videoUrl = `http://localhost:3100${status.url}`;
        const downloadConfirm = window.confirm(
          `üéâ Video rendering completed successfully!\n\nClick OK to download the video, or Cancel to copy the URL to clipboard.`
        );
        
        if (downloadConfirm) {
          // Open video in new tab for download
          window.open(videoUrl, '_blank');
        } else {
          // Copy URL to clipboard
          navigator.clipboard.writeText(videoUrl).then(() => {
            alert('Video URL copied to clipboard!');
          });
        }
        
      } else if (status.status === 'FAILED') {
        setIsRendering(false);
        setCurrentVideoId(null);
        alert('‚ùå Video rendering failed! Please try again.');
        
      } else {
        // Continue polling after 2 seconds
        setTimeout(() => pollVideoStatus(videoId), 2000);
      }
      
    } catch (error) {
      console.error('Error polling status:', error);
      setIsRendering(false);
      setCurrentVideoId(null);
      alert('Error checking render status. Please try again.');
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic extraction
    const apiData = extractDataToAPI(data, {
      width: 1920,
      height: 1080,
      fps: 30,
      enableTransitions: true,
      transitionDuration: 1000
    });

    console.log("API Data:", apiData);
    
    // Send to API and start polling
    sendToAPI(apiData);
  };

  const sendToAPI = async (apiData: any) => {
    try {
      setIsRendering(true);
      setRenderProgress(0);
      setRenderState('Starting...');
      
      const response = await fetch('http://localhost:3100/render-from-assets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiData),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('API Response:', result);
      
      const videoId = result.video.id;
      setCurrentVideoId(videoId);
      
      // Start polling for status updates
      setTimeout(() => pollVideoStatus(videoId), 1000);
      
    } catch (error) {
      console.error('Error sending to API:', error);
      setIsRendering(false);
      alert('Failed to start video rendering. Please try again.');
    }
  };

  return (
    <div style={{ display: "flex", height: "100vh" }}>
      <Sidebar />
      <main
        style={{
          flex: 1,
          padding: "1rem 2rem",
          backgroundSize: "cover",
          marginLeft: "50px",
        }}
        className="overflow-hidden"
      >
        <div
          style={{
            position: "sticky",
            top: 0,
            zIndex: 10,
            backgroundColor: "white",
            paddingBottom: "10px",
          }}
        >
          <HeaderSection onSubmit={handleSubmit} />
          <TextInput />
        </div>
        
        {/* Render Progress Display */}
        {isRendering && (
          <div style={{
            position: 'fixed',
            top: '20px',
            right: '20px',
            backgroundColor: 'white',
            border: '2px solid #3b82f6',
            borderRadius: '8px',
            padding: '16px',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
            zIndex: 1000,
            minWidth: '300px'
          }}>
            <h3 style={{ margin: '0 0 8px 0', color: '#1f2937' }}>üé¨ Rendering Video...</h3>
            <div style={{ marginBottom: '8px', fontSize: '14px', color: '#6b7280' }}>
              Progress: {renderProgress}%
              {renderState && ` ‚Ä¢ ${renderState}`}
            </div>
            <div style={{
              width: '100%',
              height: '8px',
              backgroundColor: '#e5e7eb',
              borderRadius: '4px',
              overflow: 'hidden'
            }}>
              <div style={{
                width: `${renderProgress}%`,
                height: '100%',
                backgroundColor: '#3b82f6',
                transition: 'width 0.3s ease'
              }} />
            </div>
            {currentVideoId && (
              <div style={{ marginTop: '8px', fontSize: '12px', color: '#9ca3af' }}>
                ID: {currentVideoId}
              </div>
            )}
          </div>
        )}
        
        <ResourceSection />
      </main>
    </div>
  );
}